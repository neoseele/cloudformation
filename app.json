{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC App",
    "Mappings": {
        "AWSInstanceType2Arch": {
            "c1.medium": {
                "Arch": "PV64"
            },
            "c1.xlarge": {
                "Arch": "PV64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "m1.large": {
                "Arch": "PV64"
            },
            "m1.medium": {
                "Arch": "PV64"
            },
            "m1.small": {
                "Arch": "PV64"
            },
            "m1.xlarge": {
                "Arch": "PV64"
            },
            "m2.2xlarge": {
                "Arch": "PV64"
            },
            "m2.4xlarge": {
                "Arch": "PV64"
            },
            "m2.xlarge": {
                "Arch": "PV64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "t1.micro": {
                "Arch": "PV64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "HVM64": "ami-18869819",
                "HVMG2": "ami-2e90892f",
                "PV64": "ami-3c87993d"
            },
            "ap-southeast-1": {
                "HVM64": "ami-96bb90c4",
                "HVMG2": "ami-3e78526c",
                "PV64": "ami-58ba910a"
            },
            "ap-southeast-2": {
                "HVM64": "ami-d50773ef",
                "HVMG2": "ami-315e2a0b",
                "PV64": "ami-1500742f"
            },
            "cn-north-1": {
                "HVM64": "ami-981d8fa1",
                "HVMG2": "NOT_SUPPORTED",
                "PV64": "ami-8a1d8fb3"
            },
            "eu-central-1": {
                "HVM64": "ami-04003319",
                "HVMG2": "NOT_SUPPORTED",
                "PV64": "ami-0600331b"
            },
            "eu-west-1": {
                "HVM64": "ami-9d23aeea",
                "HVMG2": "ami-4d7cf03a",
                "PV64": "ami-7b3db00c"
            },
            "sa-east-1": {
                "HVM64": "ami-af9925b2",
                "HVMG2": "NOT_SUPPORTED",
                "PV64": "ami-fd9925e0"
            },
            "us-east-1": {
                "HVM64": "ami-146e2a7c",
                "HVMG2": "ami-7200461a",
                "PV64": "ami-8e682ce6"
            },
            "us-west-1": {
                "HVM64": "ami-42908907",
                "HVMG2": "ami-244b5361",
                "PV64": "ami-f49089b1"
            },
            "us-west-2": {
                "HVM64": "ami-dfc39aef",
                "HVMG2": "ami-0b78203b",
                "PV64": "ami-9fc29baf"
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created LAMP stack",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "ApplicationSubnets": {
            "Description": "Application subnets",
            "Type": "CommaDelimitedList"
        },
        "DBAllocatedStorage": {
            "ConstraintDescription": "must be between 5 and 1024Gb.",
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "DBInstanceClass": {
            "AllowedValues": [
                "db.t1.micro",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.cr1.8xlarge"
            ],
            "ConstraintDescription": "must select a valid database instance type.",
            "Default": "db.t1.micro",
            "Description": "The database instance type",
            "Type": "String"
        },
        "DBName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "myDatabase",
            "Description": "MySQL database name",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DBPassword": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters.",
            "Description": "Password for MySQL database access",
            "MaxLength": "41",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "DBUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Description": "Username for MySQL database access",
            "MaxLength": "16",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "DatabaseSubnets": {
            "Description": "RDS subnets",
            "Type": "CommaDelimitedList"
        },
        "InstanceType": {
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "WebServer EC2 instance type",
            "Type": "String"
        },
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LoadBalancerSubnets": {
            "Description": "Load Balancer subnets",
            "Type": "CommaDelimitedList"
        },
        "MultiAZDatabase": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be either true or false.",
            "Default": "false",
            "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
            "Type": "String"
        },
        "NATSecurityGroup": {
            "Description": "",
            "Type": "String"
        },
        "Vpc": {
            "Description": "",
            "Type": "String"
        },
        "WebServerCapacity": {
            "ConstraintDescription": "must be between 1 and 5 EC2 instances.",
            "Default": "2",
            "Description": "The initial nuber of WebServer instances",
            "MaxValue": "5",
            "MinValue": "1",
            "Type": "Number"
        }
    },
    "Resources": {
        "DBEC2SecurityGroup": {
            "Properties": {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        },
                        "ToPort": "3306"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DBSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "description",
                "SubnetIds": {
                    "Ref": "DatabaseSubnets"
                }
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "ElasticLoadBalancer": {
            "Properties": {
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "10",
                    "Target": "HTTP:80/",
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "LBCookieStickinessPolicy": [
                    {
                        "CookieExpirationPeriod": "30",
                        "PolicyName": "CookieBasedPolicy"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "PolicyNames": [
                            "CookieBasedPolicy"
                        ],
                        "Protocol": "HTTP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "LoadBalancerSubnets"
                }
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource LaunchConfig ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            },
                            "/var/www/html/index.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<html>\n",
                                            "  <head>\n",
                                            "    <title>AWS CloudFormation PHP Sample</title>\n",
                                            "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                                            "  </head>\n",
                                            "  <body>\n",
                                            "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Print out the current data and tie\n",
                                            "      print \"The Current Date and Time is: <br/>\";\n",
                                            "      print date(\"g:i A l, F j Y.\");\n",
                                            "    ?>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Setup a handle for CURL\n",
                                            "      $curl_handle=curl_init();\n",
                                            "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                                            "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                                            "      // Get the hostname of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/hostname');\n",
                                            "      $hostname = curl_exec($curl_handle);\n",
                                            "      if (empty($hostname))\n",
                                            "      {\n",
                                            "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        print \"Server = \" . $hostname . \"<br />\";\n",
                                            "      }\n",
                                            "      // Get the instance-id of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                                            "      $instanceid = curl_exec($curl_handle);\n",
                                            "      if (empty($instanceid))\n",
                                            "      {\n",
                                            "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                                            "      }\n",
                                            "      $Database   = \"",
                                            {
                                                "Fn::GetAtt": [
                                                    "MySQLDatabase",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\";\n",
                                            "      $DBUser     = \"",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "\";\n",
                                            "      $DBPassword = \"",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "\";\n",
                                            "      print \"Database = \" . $Database . \"<br />\";\n",
                                            "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                                            "                      or die(\"Could not connect: \" . mysql_error());\n",
                                            "      print (\"Connected to $Database successfully\");\n",
                                            "      mysql_close($dbconnection);\n",
                                            "    ?>\n",
                                            "    <h2>PHP Information</h2>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      phpinfo();\n",
                                            "    ?>\n",
                                            "  </body>\n",
                                            "</html>\n"
                                        ]
                                    ]
                                },
                                "group": "apache",
                                "mode": "000600",
                                "owner": "apache"
                            }
                        },
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "php-mysql": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                },
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                },
                "Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
                "Comment2": "The website content is downloaded from the CloudFormationPHPSample.zip file"
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    },
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Load Balancer Access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "MySQLDatabase": {
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "DBName": {
                    "Ref": "DBName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": "MySQL",
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MultiAZ": {
                    "Ref": "MultiAZDatabase"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBEC2SecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "WebServerGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "WebServerCapacity"
                    },
                    "Timeout": "PT15M"
                }
            },
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                    }
                },
                "DesiredCapacity": {
                    "Ref": "WebServerCapacity"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": "5",
                "MinSize": "1",
                "VPCZoneIdentifier": {
                    "Ref": "ApplicationSubnets"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1",
                    "MinInstancesInService": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": "80"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
